import React, { useState, useEffect } from 'react';
import {
  Box,
  Stepper,
  Step,
  StepLabel,
  Button,
  Typography,
  Paper,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from '@mui/material';

import useApiStore from '../../infrastructure/store/apiStore';
import {
  RaceSelectionStep,
  ClassSelectionStep,
  AbilityScoresStep,
  BackgroundSelectionStep,
  SkillsSelectionStep,
  EquipmentStep,
  PersonalityStep,
  CharacterSummaryStep
} from './character-creation';

interface CharacterCreationData {
  races: { [key: string]: any };
  classes: { [key: string]: any };
  backgrounds: { [key: string]: any };
  skills: { [key: string]: any };
}

interface CharacterCreationWizardProps {
  userId: string;
  onCharacterCreated: (character: any) => void;
  onCancel: () => void;
}

const steps = [
  '–†–∞—Å–∞',
  '–ö–ª–∞—Å—Å',
  '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏',
  '–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è',
  '–ù–∞–≤—ã–∫–∏',
  '–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ',
  '–õ–∏—á–Ω–æ—Å—Ç—å',
  '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ'
];

const CharacterCreationWizard: React.FC<CharacterCreationWizardProps> = ({
  userId,
  onCharacterCreated,
  onCancel
}) => {
  const [activeStep, setActiveStep] = useState(0);
  const [creationData, setCreationData] = useState<CharacterCreationData | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [validationErrors, setValidationErrors] = useState<{[key: string]: string}>({});

  // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥—ã –∏–∑ API store
  const { getCharacterCreationData, createDnDCharacter } = useApiStore();

  // –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  const [characterData, setCharacterData] = useState({
    name: '',
    race: '',
    characterClass: '',
    background: '',
    alignment: 'Neutral',
    abilityScores: [0, 0, 0, 0, 0, 0],
    skillChoices: [] as string[],
    appearance: {
      age: 20,
      height: '',
      weight: '',
      eyes: '',
      skin: '',
      hair: ''
    },
    personality: {
      traits: [],
      ideals: [],
      bonds: [],
      flaws: []
    },
    backstory: '',
    abilityMethod: 'fixed'
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
  const [availableSkills, setAvailableSkills] = useState<string[]>([]);
  const [requiredSkillChoices, setRequiredSkillChoices] = useState(0);

  useEffect(() => {
    loadCreationData();
  }, []);

  const loadCreationData = async () => {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...');
      setLoading(true);
      const data = await getCharacterCreationData();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
      setCreationData(data);
    } catch (err: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
      setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setLoading(false);
    }
  };

  const validateStep = async (step: number): Promise<boolean> => {
    const errors: {[key: string]: string} = {};

    switch (step) {
      case 0: // –†–∞—Å–∞
        if (!characterData.race) {
          errors.race = '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É';
        }
        break;

      case 1: // –ö–ª–∞—Å—Å
        if (!characterData.characterClass) {
          errors.characterClass = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å';
        }
        break;

      case 2: // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        if (characterData.abilityMethod === 'fixed') {
          const scores = characterData.abilityScores.filter(score => score !== 0);
          const uniqueScores = new Set(scores);
          const validScores = [15, 14, 13, 12, 10, 8];
          const isValidDistribution = scores.length === 6 && 
                                    uniqueScores.size === 6 && 
                                    scores.every(score => validScores.includes(score));
          
          if (!isValidDistribution) {
            errors.abilityScores = '–ö–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ [15, 14, 13, 12, 10, 8]';
          }
        } else {
          if (characterData.abilityScores.some(score => score < 3 || score > 18)) {
            errors.abilityScores = '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 3 –¥–æ 18';
          }
        }
        break;

      case 3: // –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è
        if (!characterData.background) {
          errors.background = '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é';
        }
        break;

      case 4: // –ù–∞–≤—ã–∫–∏
        if (characterData.skillChoices.length !== requiredSkillChoices) {
          errors.skillChoices = `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ ${requiredSkillChoices} –Ω–∞–≤—ã–∫–∞`;
        }
        break;

      case 6: // –õ–∏—á–Ω–æ—Å—Ç—å
        if (!characterData.name.trim()) {
          errors.name = '–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        }
        break;
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  const handleNext = async () => {
    const isValid = await validateStep(activeStep);
    if (isValid) {
      setActiveStep((prevActiveStep) => prevActiveStep + 1);
      setValidationErrors({});
    }
  };

  const handleBack = () => {
    setActiveStep((prevActiveStep) => prevActiveStep - 1);
    setValidationErrors({});
  };

  const handleCreateCharacter = async () => {
    try {
      setLoading(true);
      setError('');

      const response = await createDnDCharacter(userId, characterData);
      onCharacterCreated(response.character);
    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
    } finally {
      setLoading(false);
    }
  };

  const getStepContent = (step: number) => {
    const commonProps = {
      characterData,
      setCharacterData,
      creationData,
      validationErrors,
      availableSkills,
      setAvailableSkills,
      requiredSkillChoices,
      setRequiredSkillChoices
    };

    switch (step) {
      case 0:
        return <RaceSelectionStep {...commonProps} />;
      case 1:
        return <ClassSelectionStep {...commonProps} />;
      case 2:
        return <AbilityScoresStep {...commonProps} />;
      case 3:
        return <BackgroundSelectionStep {...commonProps} />;
      case 4:
        return <SkillsSelectionStep {...commonProps} />;
      case 5:
        return <EquipmentStep {...commonProps} />;
      case 6:
        return <PersonalityStep {...commonProps} />;
      case 7:
        return <CharacterSummaryStep {...commonProps} />;
      default:
        return 'Unknown step';
    }
  };

  if (loading && !creationData) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <Typography>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</Typography>
      </Box>
    );
  }

  return (
    <Dialog open={true} maxWidth="md" fullWidth>
      <DialogTitle>
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ D&D 5e
      </DialogTitle>
      <DialogContent>
        <Stepper activeStep={activeStep} sx={{ mb: 3 }}>
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>

        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        <Paper sx={{ p: 2 }}>
          {getStepContent(activeStep)}
        </Paper>
      </DialogContent>
      <DialogActions>
        <Button onClick={onCancel}>
          –û—Ç–º–µ–Ω–∞
        </Button>
        <Button
          disabled={activeStep === 0}
          onClick={handleBack}
        >
          –ù–∞–∑–∞–¥
        </Button>
        <Button
          variant="contained"
          onClick={activeStep === steps.length - 1 ? handleCreateCharacter : handleNext}
          disabled={loading}
        >
          {activeStep === steps.length - 1 ? '–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' : '–î–∞–ª–µ–µ'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default CharacterCreationWizard; 