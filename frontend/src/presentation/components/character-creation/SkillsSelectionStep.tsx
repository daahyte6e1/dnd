import React, { useEffect } from 'react';
import {
  Box,
  Typography,
  Alert,
  Checkbox,
  FormControlLabel
} from '@mui/material';
import useApiStore from '../../../infrastructure/store/apiStore';
import { CharacterCreationStepProps } from './types';

const SkillsSelectionStep: React.FC<CharacterCreationStepProps> = ({
  characterData,
  setCharacterData,
  creationData,
  validationErrors,
  availableSkills,
  setAvailableSkills,
  requiredSkillChoices,
  setRequiredSkillChoices
}) => {
  const { get } = useApiStore();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –Ω–∞–≤—ã–∫–∞–º
  const getSkillRecommendations = (characterClass: string, background: string): string[] => {
    const recommendations: string[] = [];
    
    // –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∞
    switch (characterClass) {
      case 'fighter':
        recommendations.push('–ê—Ç–ª–µ—Ç–∏–∫–∞ - –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –≤–æ–∏–Ω–∞ –≤ –±–æ—é –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π');
        recommendations.push('–ó–∞–ø—É–≥–∏–≤–∞–Ω–∏–µ - –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö');
        break;
      case 'wizard':
        recommendations.push('–ú–∞–≥–∏—è - –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π');
        recommendations.push('–ê–Ω–∞–ª–∏–∑ - –ø–æ–º–æ–≥–∞–µ—Ç –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –∏ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–≥–∞–¥–æ–∫');
        break;
      case 'rogue':
        recommendations.push('–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å - –∫–ª—é—á–µ–≤–æ–π –Ω–∞–≤—ã–∫ —Ä–∞–∑–±–æ–π–Ω–∏–∫–∞');
        recommendations.push('–õ–æ–≤–∫–æ—Å—Ç—å —Ä—É–∫ - –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –≤–æ—Ä–æ–≤—Å—Ç–≤–∞ –∏ –ª–æ–≤–∫–æ—Å—Ç–∏');
        break;
      case 'cleric':
        recommendations.push('–ü—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å –º–æ—Ç–∏–≤—ã –¥—Ä—É–≥–∏—Ö');
        recommendations.push('–†–µ–ª–∏–≥–∏—è - —Å–≤—è–∑–∞–Ω–∞ —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –º–∞–≥–∏–µ–π');
        break;
      case 'ranger':
        recommendations.push('–í—ã–∂–∏–≤–∞–Ω–∏–µ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –∂–∏–∑–Ω–∏ –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ');
        recommendations.push('–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ - –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–º–µ—á–∞—Ç—å –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å–ª–µ–¥—ã');
        break;
      case 'barbarian':
        recommendations.push('–ê—Ç–ª–µ—Ç–∏–∫–∞ - –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –≤–∞—Ä–≤–∞—Ä–∞ –≤ –±–æ—é');
        recommendations.push('–í—ã–∂–∏–≤–∞–Ω–∏–µ - –ø–æ–º–æ–≥–∞–µ—Ç –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ');
        break;
      case 'bard':
        recommendations.push('–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ - –∫–ª—é—á–µ–≤–æ–π –Ω–∞–≤—ã–∫ –±–∞—Ä–¥–∞');
        recommendations.push('–£–±–µ–∂–¥–µ–Ω–∏–µ - –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö');
        break;
      case 'druid':
        recommendations.push('–ü—Ä–∏—Ä–æ–¥–∞ - —Å–≤—è–∑–∞–Ω–∞ —Å –¥—Ä—É–∏–¥—Å–∫–æ–π –º–∞–≥–∏–µ–π');
        recommendations.push('–í—ã–∂–∏–≤–∞–Ω–∏–µ - –ø–æ–º–æ–≥–∞–µ—Ç –≤ –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ');
        break;
      case 'monk':
        recommendations.push('–ê–∫—Ä–æ–±–∞—Ç–∏–∫–∞ - –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –º–æ–Ω–∞—Ö–∞ –≤ –±–æ—é');
        recommendations.push('–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å - –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Å–∫—Ä—ã—Ç–Ω–æ–º –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–∏');
        break;
      case 'paladin':
        recommendations.push('–ü—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –ø–æ–º–æ–≥–∞–µ—Ç –ø–∞–ª–∞–¥–∏–Ω—É —Å—É–¥–∏—Ç—å –æ –ª—é–¥—è—Ö');
        recommendations.push('–†–µ–ª–∏–≥–∏—è - —Å–≤—è–∑–∞–Ω–∞ —Å –±–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –º–∞–≥–∏–µ–π');
        break;
      case 'sorcerer':
        recommendations.push('–ú–∞–≥–∏—è - —Å–≤—è–∑–∞–Ω–∞ —Å —á–∞—Ä–æ–¥–µ–π—Å–∫–æ–π —Å–∏–ª–æ–π');
        recommendations.push('–û–±–º–∞–Ω - –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö');
        break;
      case 'warlock':
        recommendations.push('–ú–∞–≥–∏—è - —Å–≤—è–∑–∞–Ω–∞ —Å –ø–∞–∫—Ç–æ–≤–æ–π –º–∞–≥–∏–µ–π');
        recommendations.push('–û–±–º–∞–Ω - –ø–æ–º–æ–≥–∞–µ—Ç –≤ —Å–¥–µ–ª–∫–∞—Ö —Å –ø–æ—Ç—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ —Å—É—â–µ—Å—Ç–≤–∞–º–∏');
        break;
    }
    
    return recommendations;
  };

  const updateAvailableSkills = async () => {
    if (!characterData.characterClass || !characterData.background) return;

    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è:', characterData.characterClass, characterData.background);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º API store –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
      const endpoint = `/games/character-creation/available-skills?characterClass=${characterData.characterClass}&background=${characterData.background}`;
      console.log('üì° –í—ã–∑—ã–≤–∞–µ–º API:', endpoint);
      
      const skillsInfo = await get(endpoint);
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–æ–≤:', skillsInfo);

      setAvailableSkills(skillsInfo.availableSkills);
      setRequiredSkillChoices(skillsInfo.requiredChoices);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–∞—Ö –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏
      if (skillsInfo.backgroundSkills.length > 0) {
        console.log('–ù–∞–≤—ã–∫–∏ –æ—Ç –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏:', skillsInfo.backgroundSkills);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤:', error);
      
      // Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
      if (!creationData) return;

      const classData = creationData.classes[characterData.characterClass];
      const backgroundData = creationData.backgrounds[characterData.background];
      
      if (!classData || !backgroundData) return;

      const classSkillChoices = classData.skillChoices || 2;
      setRequiredSkillChoices(classSkillChoices);

      const classSkills = classData.skills || [];
      const backgroundSkills = backgroundData.skillProficiencies || [];
      const availableSkillsList = classSkills.filter((skill: string) => !backgroundSkills.includes(skill));
      
      setAvailableSkills(availableSkillsList);
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∞ –∏–ª–∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏
  useEffect(() => {
    if (characterData.characterClass && characterData.background) {
      updateAvailableSkills();
    }
  }, [characterData.characterClass, characterData.background]);

  return (
    <Box>
      <Typography variant="h6" gutterBottom>
        –ù–∞–≤—ã–∫–∏
      </Typography>
      <Alert severity="info" sx={{ mb: 2 }}>
        –í—ã–±–µ—Ä–∏—Ç–µ {requiredSkillChoices} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      </Alert>
      {validationErrors.skillChoices && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {validationErrors.skillChoices}
        </Alert>
      )}

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞–≤—ã–∫–∞–º */}
      {characterData.characterClass && characterData.background && (
        <Alert severity="success" sx={{ mb: 2 }}>
          <Typography variant="subtitle2" gutterBottom>
            üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {creationData?.classes[characterData.characterClass]?.name}:
          </Typography>
          <Typography variant="body2">
            {(() => {
              const recommendations = getSkillRecommendations(characterData.characterClass, characterData.background);
              return recommendations.map((rec, index) => (
                <Box key={index} sx={{ mt: 1 }}>
                  <Typography variant="body2" color="primary">
                    ‚Ä¢ {rec}
                  </Typography>
                </Box>
              ));
            })()}
          </Typography>
        </Alert>
      )}
      <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: 'repeat(2, 1fr)', md: 'repeat(3, 1fr)' }, gap: 1 }}>
        {availableSkills.map((skillKey) => {
          return (
            <FormControlLabel
              key={skillKey}
              control={
                <Checkbox
                  checked={characterData.skillChoices.includes(skillKey)}
                  onChange={(e) => {
                    if (e.target.checked) {
                      setCharacterData(prev => ({
                        ...prev,
                        skillChoices: [...prev.skillChoices, skillKey]
                      }));
                    } else {
                      setCharacterData(prev => ({
                        ...prev,
                        skillChoices: prev.skillChoices.filter((s: string) => s !== skillKey)
                      }));
                    }
                  }}
                />
              }
              label={
                <Box>
                  <div>{creationData?.skills}</div>
                  <div>{skillKey}</div>
                  <Typography variant="body2">{creationData?.skills[skillKey]?.name}</Typography>
                  <Typography variant="caption" color="textSecondary">
                    ({creationData?.skills[skillKey]?.ability})
                  </Typography>
                </Box>
              }
            />
          );
        })}
      </Box>
      <Box sx={{ mt: 2 }}>
        <Typography variant="body2" color="textSecondary">
          –í—ã–±—Ä–∞–Ω–æ: {characterData.skillChoices.length} –∏–∑ {requiredSkillChoices}
        </Typography>
      </Box>
    </Box>
  );
};

export default SkillsSelectionStep; 