import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Container,
  Paper,
  TextField,
  Button,
  Grid,
  Card,
  CardContent,
  CardActions,
  Alert,
  Divider
} from '@mui/material';
import { useWebSocketStore } from '../../infrastructure/store/websocketStore';
import apiClient from '../../infrastructure/api/apiClient';

const HomePage = () => {
  const navigate = useNavigate();
  const [gameName, setGameName] = useState('–¢–µ—Å—Ç123');
  const [playerName, setPlayerName] = useState('–¢–µ—Å—Ç');
  const [isCreating, setIsCreating] = useState(false);
  const [isJoining, setIsJoining] = useState(false);
  const [error, setError] = useState('');
  
  const { connect, isConnected } = useWebSocketStore();

  const handleCreateGame = async () => {
    if (!gameName.trim() || !playerName.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setIsCreating(true);
    setError('');

    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      await connect();
      
      // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ API –∫–ª–∏–µ–Ω—Ç
      const gameData = await apiClient.createGame({
        name: gameName,
        playerName: playerName,
        isHost: true
      });

      navigate(`/game/${gameName}`);
    } catch (err) {
      setError(err.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã');
    } finally {
      setIsCreating(false);
    }
  };

  const handleJoinGame = async () => {
    if (!gameName.trim() || !playerName.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setIsJoining(true);
    setError('');

    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      await connect();
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∏–≥—Ä–µ —á–µ—Ä–µ–∑ API –∫–ª–∏–µ–Ω—Ç
      await apiClient.joinGame(gameName, {
        playerName: playerName
      });

      navigate(`/game/${gameName}`);
    } catch (err) {
      setError(err.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ');
    } finally {
      setIsJoining(false);
    }
  };

  return (
    <Container maxWidth="lg">
      <Box sx={{ mt: 4, mb: 4 }}>
        <Paper elevation={3} sx={{ p: 4, textAlign: 'center' }}>
          <Typography variant="h2" component="h1" gutterBottom>
            Dragon & Dungeons
          </Typography>
          <Typography variant="h5" color="text.secondary" gutterBottom>
            –°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∏–≥—Ä–µ
          </Typography>
          
          <Divider sx={{ my: 3 }} />
          
          <Grid container spacing={4}>
            <Grid item xs={12} md={6}>
              <Card>
                <CardContent>
                  <Typography variant="h5" gutterBottom>
                    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                    –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ª–æ–±–±–∏ –∏ —Å—Ç–∞–Ω—å—Ç–µ –º–∞—Å—Ç–µ—Ä–æ–º –∏–≥—Ä—ã
                  </Typography>
                  
                  <TextField
                    fullWidth
                    label="–ò–º—è –∏–≥—Ä—ã"
                    value={gameName}
                    onChange={(e) => setGameName(e.target.value)}
                    sx={{ mb: 2 }}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∏–≥—Ä—ã"
                  />
                  
                  <TextField
                    fullWidth
                    label="–í–∞—à–µ –∏–º—è"
                    value={playerName}
                    onChange={(e) => setPlayerName(e.target.value)}
                    sx={{ mb: 2 }}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
                  />
                  
                  <Button
                    fullWidth
                    variant="contained"
                    size="large"
                    onClick={handleCreateGame}
                    disabled={isCreating}
                  >
                    {isCreating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É'}
                  </Button>
                </CardContent>
              </Card>
            </Grid>
            
            <Grid item xs={12} md={6}>
              <Card>
                <CardContent>
                  <Typography variant="h5" gutterBottom>
                    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ
                  </Typography>
                  <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
                    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ª–æ–±–±–∏
                  </Typography>
                  
                  <TextField
                    fullWidth
                    label="–ò–º—è –∏–≥—Ä—ã"
                    value={gameName}
                    onChange={(e) => setGameName(e.target.value)}
                    sx={{ mb: 2 }}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
                  />
                  
                  <TextField
                    fullWidth
                    label="–í–∞—à–µ –∏–º—è"
                    value={playerName}
                    onChange={(e) => setPlayerName(e.target.value)}
                    sx={{ mb: 2 }}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"
                  />
                  
                  <Button
                    fullWidth
                    variant="outlined"
                    size="large"
                    onClick={handleJoinGame}
                    disabled={isJoining}
                  >
                    {isJoining ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'}
                  </Button>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
          
          {error && (
            <Alert severity="error" sx={{ mt: 3 }}>
              {error}
            </Alert>
          )}
          
          <Box sx={{ mt: 4 }}>
            <Typography variant="h6" gutterBottom>
              –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6} md={3}>
                <Typography variant="body2" color="text.secondary">
                  üé≤ –°–∏—Å—Ç–µ–º–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤
                </Typography>
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <Typography variant="body2" color="text.secondary">
                  üåç –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∏—Ä–∞
                </Typography>
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <Typography variant="body2" color="text.secondary">
                  üë• –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏–≥—Ä–∞
                </Typography>
              </Grid>
              <Grid item xs={12} sm={6} md={3}>
                <Typography variant="body2" color="text.secondary">
                  ‚öîÔ∏è –°–∏—Å—Ç–µ–º–∞ –±–æ—è –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
                </Typography>
              </Grid>
            </Grid>
          </Box>
        </Paper>
      </Box>
    </Container>
  );
};

export default HomePage; 