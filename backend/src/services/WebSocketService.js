const { Server } = require('socket.io');
const GameService = require('./GameService');
const { Player, User, Character } = require('../models');

class WebSocketService {
  constructor(server) {
    this.io = new Server(server, {
      cors: {
        origin: process.env.FRONTEND_URL || ["http://localhost:5173", "http://localhost:5174"],
        methods: ["GET", "POST"]
      }
    });
    
    this.gameService = new GameService();
    console.log('üîå WebSocketService —Å–æ–∑–¥–∞–Ω —Å –Ω–æ–≤—ã–º GameService');
    this.gameRooms = new Map(); // –ö—ç—à –∫–æ–º–Ω–∞—Ç –∏–≥—Ä
    this.userSockets = new Map(); // –°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ–∫–µ—Ç–∞–º–∏
    
    this.setupEventHandlers();
  }

  setupEventHandlers() {
    this.io.on('connection', (socket) => {
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
      console.log(`Origin: ${socket.handshake.headers.origin}`);
      
      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      socket.on('authenticate', async (data) => {
        await this.handleAuthentication(socket, data);
      });

      // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ
      socket.on('join_game', async (data) => {
        await this.handleJoinGame(socket, data);
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      socket.on('create_character', async (data) => {
        await this.handleCreateCharacter(socket, data);
      });

      // –î–≤–∏–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      socket.on('move_character', async (data) => {
        await this.handleMoveCharacter(socket, data);
      });

      // –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
      socket.on('roll_dice', async (data) => {
        await this.handleRollDice(socket, data);
      });

      // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–π–ª–æ–º
      socket.on('interact_tile', async (data) => {
        await this.handleInteractTile(socket, data);
      });

      // –ß–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
      socket.on('chat_message', async (data) => {
        await this.handleChatMessage(socket, data);
      });

      // –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–ª–µ
      socket.on('get_tile_info', async (data) => {
        await this.handleGetTileInfo(socket, data);
      });

      // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
      socket.on('disconnect', () => {
        this.handleDisconnect(socket);
      });
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async handleAuthentication(socket, data) {
    try {
      const { userId, token } = data;
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
      // –î–ª—è MVP –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
      if (!userId) {
        socket.emit('error', { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–∫–µ—Ç–æ–º
      this.userSockets.set(userId, socket.id);
      socket.userId = userId;
      
      socket.emit('authenticated', { userId });
      console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω`);
    } catch (error) {
      socket.emit('error', { message: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏' });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ
  async handleJoinGame(socket, data) {
    try {
      const { gameName } = data;
      const userId = socket.userId;

      console.log(`üéÆ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ: ${gameName} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${userId}`);

      if (!userId) {
        socket.emit('error', { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
        return;
      }

      console.log(`üîç –í—ã–∑—ã–≤–∞–µ–º gameService.joinGame –¥–ª—è –∏–≥—Ä—ã: ${gameName}`);
      const result = await this.gameService.joinGame(gameName, { name: `User-${userId}`, isHost: false });
      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç joinGame:`, result);
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–∫–µ—Ç –∫ –∫–æ–º–Ω–∞—Ç–µ –∏–≥—Ä—ã
      socket.join(result.game.id);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
      if (!this.gameRooms.has(result.game.id)) {
        this.gameRooms.set(result.game.id, {
          game: result.game,
          players: new Map()
        });
      }
      
      const room = this.gameRooms.get(result.game.id);
      room.players.set(userId, {
        socketId: socket.id,
        player: result.player
      });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ
      this.io.to(result.game.id).emit('player_joined', {
        player: result.player,
        isNewPlayer: result.isNewPlayer
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
      const gameState = await this.gameService.getGameState(result.game.id, userId);
      socket.emit('game_state', gameState);

      console.log(`–ò–≥—Ä–æ–∫ ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ ${gameName}`);
    } catch (error) {
      socket.emit('error', { message: error.message });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  async handleCreateCharacter(socket, data) {
    try {
      const { gameId, characterData } = data;
      const userId = socket.userId;

      if (!userId) {
        socket.emit('error', { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
        return;
      }

      const player = await Player.findOne({ where: { userId, gameId } });
      if (!player) {
        socket.emit('error', { message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–≥—Ä–µ' });
        return;
      }

      const character = await this.gameService.createCharacter(player.id, characterData);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.io.to(gameId).emit('character_created', {
        playerId: player.id,
        character
      });

      socket.emit('character_created_success', { character });
    } catch (error) {
      socket.emit('error', { message: error.message });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  async handleMoveCharacter(socket, data) {
    try {
      const { gameId, position } = data;
      const userId = socket.userId;

      if (!userId) {
        socket.emit('error', { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
        return;
      }

      const player = await Player.findOne({ where: { userId, gameId } });
      if (!player) {
        socket.emit('error', { message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–≥—Ä–µ' });
        return;
      }

      const character = await this.gameService.moveCharacter(player.id, position);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –¥–≤–∏–∂–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.io.to(gameId).emit('character_moved', {
        playerId: player.id,
        character,
        position
      });

      socket.emit('move_success', { character });
    } catch (error) {
      socket.emit('error', { message: error.message });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞
  async handleRollDice(socket, data) {
    try {
      const { gameId, command } = data;
      const userId = socket.userId;

      if (!userId) {
        socket.emit('error', { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
        return;
      }

      const player = await Player.findOne({ where: { userId, gameId } });
      if (!player) {
        socket.emit('error', { message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–≥—Ä–µ' });
        return;
      }

      const result = await this.gameService.rollDice(gameId, player.id, command);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –±—Ä–æ—Å–∫–µ –∫—É–±–∏–∫–∞
      this.io.to(gameId).emit('dice_rolled', {
        playerId: player.id,
        result: result.result,
        message: result.message
      });

      socket.emit('roll_success', result);
    } catch (error) {
      socket.emit('error', { message: error.message });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–∞–π–ª–æ–º
  async handleInteractTile(socket, data) {
    try {
      const { gameId, x, y, action } = data;
      const userId = socket.userId;

      if (!userId) {
        socket.emit('error', { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
        return;
      }

      const player = await Player.findOne({ where: { userId, gameId } });
      if (!player) {
        socket.emit('error', { message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–≥—Ä–µ' });
        return;
      }

      const result = await this.gameService.interactWithTile(gameId, player.id, x, y, action);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
      this.io.to(gameId).emit('tile_interaction', {
        playerId: player.id,
        x,
        y,
        action,
        result
      });

      socket.emit('interaction_success', result);
    } catch (error) {
      socket.emit('error', { message: error.message });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
  async handleChatMessage(socket, data) {
    try {
      const { gameId, message } = data;
      const userId = socket.userId;

      if (!userId) {
        socket.emit('error', { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
        return;
      }

      const player = await Player.findOne({ 
        where: { userId, gameId },
        include: [{ model: User, as: 'user' }]
      });
      
      if (!player) {
        socket.emit('error', { message: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–≥—Ä–µ' });
        return;
      }

      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.gameService.logAction(gameId, player.id, 'chat', message);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
      this.io.to(gameId).emit('chat_message', {
        playerId: player.id,
        playerName: player.user.username,
        message,
        timestamp: new Date()
      });
    } catch (error) {
      socket.emit('error', { message: error.message });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–ª–µ
  async handleGetTileInfo(socket, data) {
    try {
      const { gameId, x, y } = data;
      const userId = socket.userId;

      if (!userId) {
        socket.emit('error', { message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
        return;
      }

      const tileInfo = await this.gameService.getTileInfo(gameId, x, y);
      
      socket.emit('tile_info', {
        x,
        y,
        tile: tileInfo
      });
    } catch (error) {
      socket.emit('error', { message: error.message });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  handleDisconnect(socket) {
    const userId = socket.userId;
    
    if (userId) {
      // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å–æ–∫–µ—Ç–æ–º
      this.userSockets.delete(userId);
      
      // –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      for (const [gameId, room] of this.gameRooms) {
        if (room.players.has(userId)) {
          // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
          room.players.delete(userId);
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
          this.io.to(gameId).emit('player_disconnected', { userId });
          
          // –û—Ç–∫–ª—é—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
          this.gameService.disconnectPlayer(userId);
          
          console.log(`–ò–≥—Ä–æ–∫ ${userId} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –∏–≥—Ä—ã ${gameId}`);
          break;
        }
      }
    }
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏–≥—Ä—É
  sendSystemMessage(gameId, message, data = {}) {
    this.io.to(gameId).emit('system_message', {
      message,
      data,
      timestamp: new Date()
    });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
  async updateGameStateForAll(gameId) {
    try {
      const room = this.gameRooms.get(gameId);
      if (!room) return;

      for (const [userId, playerInfo] of room.players) {
        const gameState = await this.gameService.getGameState(gameId, userId);
        const socket = this.io.sockets.sockets.get(playerInfo.socketId);
        if (socket) {
          socket.emit('game_state_updated', gameState);
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ
  getPlayersInGame(gameId) {
    const room = this.gameRooms.get(gameId);
    return room ? Array.from(room.players.keys()) : [];
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∏–≥—Ä–æ–∫ –∫ –∏–≥—Ä–µ
  isPlayerInGame(gameId, userId) {
    const room = this.gameRooms.get(gameId);
    return room ? room.players.has(userId) : false;
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ GameService
  setGameService(gameService) {
    this.gameService = gameService;
    console.log('üîå GameService —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ WebSocketService');
  }
}

module.exports = WebSocketService; 