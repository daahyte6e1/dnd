import { Request, Response } from 'express';
import GameService from '../services/GameService';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π GameService
declare global {
  var gameService: GameService;
}

const gameService = global.gameService;

console.log('üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π GameService');

interface CreateGameRequest {
  name: string;
  playerName: string;
  isHost?: boolean;
  dmId: string;
}

interface JoinGameRequest {
  playerName: string;
}

interface CharacterData {
  name: string;
  class: string;
  level: number;
  health: number;
  maxHealth: number;
  position: { x: number; y: number };
  initiative: number;
  abilities: {
    str: number;
    dex: number;
    con: number;
    int: number;
    wis: number;
    cha: number;
  };
  inventory: any[];
}

interface MoveCharacterRequest {
  position: { x: number; y: number };
  playerId: string;
}

interface RollDiceRequest {
  command: string;
}

interface InteractWithTileRequest {
  x: number;
  y: number;
  action: string;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
const createGame = async (req: Request<{}, {}, CreateGameRequest>, res: Response): Promise<void> => {
  try {
    const { name, playerName, isHost, dmId } = req.body;

    if (!name || !playerName || !dmId) {
      res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–≥—Ä—ã, –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏ ID –º–∞—Å—Ç–µ—Ä–∞ –∏–≥—Ä—ã' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!gameService) {
      console.error('‚ùå GameService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ GameService
    const gameData = {
      name,
      description: `–ò–≥—Ä–∞ ${name}`,
      maxPlayers: 6,
      isPrivate: false,
      dmId
    };

    console.log('üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ GameService:', gameData);
    const game = await gameService.createGame(gameData);
    console.log('‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ GameService:', game.id);

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
    const player = await gameService.joinGame(name, {
      name: playerName,
      isHost: isHost || false
    });

    res.status(201).json({
      message: '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      game: {
        id: game.id,
        name: game.name,
        player: player.player
      }
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
const getGames = async (req: Request, res: Response): Promise<void> => {
  try {
    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const games = await gameService.getActiveGames();
    
    res.json({ 
      games: games.map(game => ({
        id: game.id,
        name: game.name,
        description: game.description,
        maxPlayers: game.maxPlayers,
        isPrivate: game.isPrivate,
        isActive: game.isActive
      }))
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ
const getGame = async (req: Request<{ gameId: string }>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const gameState = await gameService.getGameState(gameId);

    res.json(gameState);
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ –ø–æ –∏–º–µ–Ω–∏
const joinGameByName = async (req: Request<{ gameName: string }, {}, JoinGameRequest>, res: Response): Promise<void> => {
  try {
    const { gameName } = req.params;
    const { playerName } = req.body;

    if (!playerName) {
      res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞' });
      return;
    }

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const result = await gameService.joinGame(gameName, {
      name: playerName,
      isHost: false
    });

    res.json({
      message: '–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ',
      game: {
        id: result.game.id,
        name: result.game.name,
        player: result.player
      }
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ:', error);
    res.status(500).json({ error: error.message });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const createCharacter = async (req: Request<{ gameId: string }, {}, CharacterData>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const characterData = req.body;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const character = await gameService.createCharacter(gameId, characterData);

    res.json({
      message: '–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      character
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    res.status(500).json({ error: error.message });
  }
};

// –î–≤–∏–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const moveCharacter = async (req: Request<{ gameId: string }, {}, MoveCharacterRequest>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const { position, playerId } = req.body;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const result = await gameService.moveCharacter(gameId, playerId, position);

    res.json({
      message: '–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω',
      character: result.character,
      newPosition: result.newPosition
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
const rollDice = async (req: Request<{ gameId: string }, {}, RollDiceRequest>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const { command } = req.body;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const result = gameService.rollDice(command);

    res.json({
      message: '–ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω',
      roll: result
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
    res.status(500).json({ error: error.message });
  }
};

// –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–π–ª–æ–º
const interactWithTile = async (req: Request<{ gameId: string }, {}, InteractWithTileRequest>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const { x, y, action } = req.body;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const result = await gameService.interactWithTile(gameId, x, y, action);

    res.json({
      message: '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
      result
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–∞–π–ª–æ–º:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–ª–µ
const getTileInfo = async (req: Request<{ gameId: string; x: string; y: string }>, res: Response): Promise<void> => {
  try {
    const { gameId, x, y } = req.params;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const tileInfo = await gameService.getTileInfo(gameId, parseInt(x), parseInt(y));

    res.json({
      tile: tileInfo
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–ª–µ:', error);
    res.status(500).json({ error: error.message });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const updateGameState = async (req: Request<{ gameId: string }, {}, any>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const gameState = req.body;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const result = await gameService.updateGameState(gameId, gameState);

    res.json({
      message: '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
      gameState: result
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
    res.status(500).json({ error: error.message });
  }
};

export {
  createGame,
  getGames,
  getGame,
  joinGameByName,
  createCharacter,
  moveCharacter,
  rollDice,
  interactWithTile,
  getTileInfo,
  updateGameState
}; 