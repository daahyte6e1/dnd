import { Request, Response } from 'express';
import GameService from '../services/GameService';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π GameService
declare global {
  var gameService: GameService;
  var games: Map<string, any>;
  var players: Map<string, any>;
}

const gameService = global.gameService;
const games = global.games;
const players = global.players;

console.log('üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π GameService');
console.log('üìã –†–∞–∑–º–µ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏–≥—Ä:', games ? games.size : 0);
console.log('üîç –í–Ω–µ—à–Ω–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä –¥–æ—Å—Ç—É–ø–Ω–æ:', !!games);

interface CreateGameRequest {
  name: string;
  playerName: string;
  isHost?: boolean;
}

interface JoinGameRequest {
  playerName: string;
}

interface CharacterData {
  name: string;
  class: string;
  level: number;
  health: number;
  maxHealth: number;
  position: { x: number; y: number };
  initiative: number;
  abilities: {
    str: number;
    dex: number;
    con: number;
    int: number;
    wis: number;
    cha: number;
  };
  inventory: any[];
}

interface MoveCharacterRequest {
  position: { x: number; y: number };
}

interface RollDiceRequest {
  command: string;
}

interface InteractWithTileRequest {
  x: number;
  y: number;
  action: string;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
const createGame = async (req: Request<{}, {}, CreateGameRequest>, res: Response): Promise<void> => {
  try {
    const { name, playerName, isHost } = req.body;

    if (!name || !playerName) {
      res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–≥—Ä—ã –∏ –∏–º—è –∏–≥—Ä–æ–∫–∞' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (!gameService || !games || !players) {
      console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    if (games.has(name)) {
      res.status(409).json({ error: '–ò–≥—Ä–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ GameService
    const gameData = {
      name,
      description: `–ò–≥—Ä–∞ ${name}`,
      maxPlayers: 6,
      isPrivate: false
    };

    console.log('üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ GameService:', gameData);
    const game = gameService.createGame(gameData);
    console.log('‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ GameService:', game.id);

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
    const player = {
      id: Date.now().toString(),
      name: playerName,
      isHost: isHost || false,
      gameId: game.id,
      character: {
        id: Date.now().toString(),
        name: playerName,
        class: 'Warrior',
        level: 1,
        health: 100,
        maxHealth: 100,
        position: { x: 10, y: 10 },
        initiative: 0,
        abilities: {
          str: 15,
          dex: 12,
          con: 14,
          int: 10,
          wis: 8,
          cha: 13
        },
        inventory: []
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ GameService
    gameService.joinGame(game.name, {
      name: playerName,
      isHost: isHost || false
    });

    games.set(name, game);
    players.set(player.id, player);

    res.status(201).json({
      message: '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      game: {
        id: game.id,
        name: game.name,
        player: player
      }
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
const getGames = async (req: Request, res: Response): Promise<void> => {
  try {
    const gamesList = Array.from(games.values()).filter((game: any) => game.isActive);
    
    res.json({ 
      games: gamesList.map((game: any) => ({
        id: game.id,
        name: game.name,
        description: game.description,
        maxPlayers: game.maxPlayers,
        playerCount: Array.from(players.values()).filter((p: any) => p.gameId === game.id).length
      }))
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ
const getGame = async (req: Request<{ gameId: string }>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;

    const game = games.get(gameId);
    if (!game) {
      res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      return;
    }

    const gamePlayers = Array.from(players.values()).filter((p: any) => p.gameId === gameId);

    res.json({
      ...game,
      players: gamePlayers
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ –ø–æ –∏–º–µ–Ω–∏
const joinGameByName = async (req: Request<{ gameName: string }, {}, JoinGameRequest>, res: Response): Promise<void> => {
  try {
    const { gameName } = req.params;
    const { playerName } = req.body;

    if (!playerName) {
      res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞' });
      return;
    }

    const game = games.get(gameName);
    if (!game) {
      res.status(404).json({ error: '–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
    const playerCount = Array.from(players.values()).filter((p: any) => p.gameId === game.id).length;
    if (playerCount >= game.maxPlayers) {
      res.status(409).json({ error: '–ò–≥—Ä–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞' });
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
    const player = {
      id: Date.now().toString(),
      name: playerName,
      isHost: false,
      gameId: game.id,
      character: {
        id: Date.now().toString(),
        name: playerName,
        class: 'Warrior',
        level: 1,
        health: 100,
        maxHealth: 100,
        position: { x: 10, y: 10 },
        initiative: 0,
        abilities: {
          str: 15,
          dex: 12,
          con: 14,
          int: 10,
          wis: 8,
          cha: 13
        },
        inventory: []
      }
    };

    players.set(player.id, player);

    res.json({
      message: '–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ',
      game: {
        id: game.id,
        name: game.name,
        player: player
      }
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ:', error);
    res.status(500).json({ error: error.message });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const createCharacter = async (req: Request<{ gameId: string }, {}, CharacterData>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const characterData = req.body;

    const character = {
      id: Date.now().toString(),
      ...characterData,
      createdAt: new Date()
    };

    res.json({
      message: '–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      character
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    res.status(500).json({ error: error.message });
  }
};

// –î–≤–∏–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const moveCharacter = async (req: Request<{ gameId: string }, {}, MoveCharacterRequest>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const { position } = req.body;

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏
    if (position.x < 0 || position.x >= 20 || position.y < 0 || position.y >= 20) {
      res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–∑–∏—Ü–∏—è' });
      return;
    }

    res.json({
      message: '–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω',
      character: { position },
      newPosition: position
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
const rollDice = async (req: Request<{ gameId: string }, {}, RollDiceRequest>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const { command } = req.body;

    const result = gameService.rollDice(command);

    res.json({
      message: '–ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω',
      roll: result
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
    res.status(500).json({ error: error.message });
  }
};

// –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–π–ª–æ–º
const interactWithTile = async (req: Request<{ gameId: string }, {}, InteractWithTileRequest>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const { x, y, action } = req.body;

    const result = gameService.interactWithTile(gameId, x, y, action);

    res.json({
      message: '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
      result
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–∞–π–ª–æ–º:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–ª–µ
const getTileInfo = async (req: Request<{ gameId: string; x: string; y: string }>, res: Response): Promise<void> => {
  try {
    const { gameId, x, y } = req.params;

    const tileInfo = gameService.getTileInfo(gameId, parseInt(x), parseInt(y));

    res.json({
      tile: tileInfo
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–ª–µ:', error);
    res.status(500).json({ error: error.message });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const updateGameState = async (req: Request<{ gameId: string }, {}, any>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const gameState = req.body;

    res.json({
      message: '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
      gameState
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
    res.status(500).json({ error: error.message });
  }
};

export {
  createGame,
  getGames,
  getGame,
  joinGameByName,
  createCharacter,
  moveCharacter,
  rollDice,
  interactWithTile,
  getTileInfo,
  updateGameState
}; 