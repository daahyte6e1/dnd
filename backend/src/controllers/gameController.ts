import { Request, Response } from 'express';
import GameService from '../services/GameService';
import User from '../models/User'; // Added import for User model
import CharacterCreationService from '../services/CharacterCreationService';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π GameService
declare global {
  var gameService: GameService;
}

const gameService = global.gameService;

console.log('üéÆ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π GameService');

interface CreateGameRequest {
  name: string;
  playerName: string;
  isHost?: boolean;
  dmId: string;
}

interface JoinGameRequest {
  playerName: string;
}

interface CharacterData {
  name: string;
  class: string;
  level: number;
  health: number;
  maxHealth: number;
  position: { x: number; y: number };
  initiative: number;
  abilities: {
    str: number;
    dex: number;
    con: number;
    int: number;
    wis: number;
    cha: number;
  };
  inventory: any[];
}

interface MoveCharacterRequest {
  position: { x: number; y: number };
  playerId: string;
}

interface RollDiceRequest {
  command: string;
}

interface InteractWithTileRequest {
  x: number;
  y: number;
  action: string;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
const createGame = async (req: Request<{}, {}, CreateGameRequest>, res: Response): Promise<void> => {
  try {
    const { name, playerName, isHost, dmId } = req.body;

    if (!name || !playerName) {
      res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–≥—Ä—ã –∏ –∏–º—è –∏–≥—Ä–æ–∫–∞' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!gameService) {
      console.error('‚ùå GameService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    let finalDmId = dmId;
    
    // –ï—Å–ª–∏ dmId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!dmId) {
      const tempUser = await User.create({
        username: `dm_${Date.now()}`,
        email: `temp_${Date.now()}@temp.com`,
        password: 'temp_password_123',
        isActive: true
      });
      finalDmId = tempUser.id;
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è DM:', finalDmId);
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º dmId
      const existingUser = await User.findByPk(dmId);
      if (!existingUser) {
        res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º dmId –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        return;
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É —á–µ—Ä–µ–∑ GameService
    const gameData = {
      name,
      description: `–ò–≥—Ä–∞ ${name}`,
      maxPlayers: 6,
      isPrivate: false,
      dmId: finalDmId
    };

    console.log('üéÆ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ GameService:', gameData);
    const game = await gameService.createGame(gameData);
    console.log('‚úÖ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ GameService:', game.id);

    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
    const player = await gameService.joinGame(name, {
      name: playerName,
      isHost: isHost || false
    });

    res.status(201).json({
      message: '–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞',
      game: {
        id: game.id,
        name: game.name,
        player: player.player
      }
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
const getGames = async (req: Request, res: Response): Promise<void> => {
  try {
    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const games = await gameService.getActiveGames();
    
    res.json({ 
      games: games.map(game => ({
        id: game.id,
        name: game.name,
        description: game.description,
        maxPlayers: game.maxPlayers,
        isPrivate: game.isPrivate,
        isActive: game.isActive
      }))
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ
const getGame = async (req: Request<{ gameId: string }>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const gameState = await gameService.getGameState(gameId);

    res.json(gameState);
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä—ã:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ –ø–æ –∏–º–µ–Ω–∏
const joinGameByName = async (req: Request<{ gameName: string }, {}, JoinGameRequest>, res: Response): Promise<void> => {
  try {
    const { gameName } = req.params;
    const { playerName } = req.body;

    if (!playerName) {
      res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏–≥—Ä–æ–∫–∞' });
      return;
    }

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const result = await gameService.joinGame(gameName, {
      name: playerName,
      isHost: false
    });

    res.json({
      message: '–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ',
      game: {
        id: result.game.id,
        name: result.game.name,
        player: result.player
      }
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∏–≥—Ä–µ:', error);
    res.status(500).json({ error: error.message });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const createCharacter = async (req: Request<{ gameId: string }, {}, CharacterData>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const characterData = req.body;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const character = await gameService.createCharacter(gameId, characterData);

    res.json({
      message: '–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      character
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    res.status(500).json({ error: error.message });
  }
};

// –î–≤–∏–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const moveCharacter = async (req: Request<{ gameId: string }, {}, MoveCharacterRequest>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const { position, playerId } = req.body;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const result = await gameService.moveCharacter(gameId, playerId, position);

    res.json({
      message: '–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω',
      character: result.character,
      newPosition: result.newPosition
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞
const rollDice = async (req: Request<{ gameId: string }, {}, RollDiceRequest>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const { command } = req.body;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const result = gameService.rollDice(command);

    res.json({
      message: '–ö—É–±–∏–∫ –±—Ä–æ—à–µ–Ω',
      roll: result
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–∞:', error);
    res.status(500).json({ error: error.message });
  }
};

// –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–π–ª–æ–º
const interactWithTile = async (req: Request<{ gameId: string }, {}, InteractWithTileRequest>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const { x, y, action } = req.body;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const result = await gameService.interactWithTile(gameId, x, y, action);

    res.json({
      message: '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
      result
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–∞–π–ª–æ–º:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–ª–µ
const getTileInfo = async (req: Request<{ gameId: string; x: string; y: string }>, res: Response): Promise<void> => {
  try {
    const { gameId, x, y } = req.params;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const tileInfo = await gameService.getTileInfo(gameId, parseInt(x), parseInt(y));

    res.json({
      tile: tileInfo
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–ª–µ:', error);
    res.status(500).json({ error: error.message });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const updateGameState = async (req: Request<{ gameId: string }, {}, any>, res: Response): Promise<void> => {
  try {
    const { gameId } = req.params;
    const gameState = req.body;

    if (!gameService) {
      res.status(500).json({ error: '–°–µ—Ä–≤–∏—Å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
      return;
    }

    const result = await gameService.updateGameState(gameId, gameState);

    res.json({
      message: '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
      gameState: result
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', error);
    res.status(500).json({ error: error.message });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserCharacters = async (req: Request<{ userId: string }>, res: Response): Promise<void> => {
  try {
    const { userId } = req.params;
    if (!userId) {
      res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω userId' });
      return;
    }
    const players = await global.gameService.models.Player.findAll({ where: { userId } });
    const playerIds = players.map((p: any) => p.id);
    const characters = await global.gameService.models.Character.findAll({ where: { playerId: playerIds } });
    res.json({ characters });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const createClassicCharacter = async (req: Request<{ userId: string }>, res: Response): Promise<void> => {
  try {
    const { userId } = req.params;
    const { name, characterClass } = req.body;
    if (!userId || !name || !characterClass) {
      res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã userId, name –∏–ª–∏ characterClass' });
      return;
    }
    // –ù–∞—Ö–æ–¥–∏–º Player –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    let player = await global.gameService.models.Player.findOne({ where: { userId } });
    if (!player) {
      player = await global.gameService.models.Player.create({ userId, gameId: null, isReady: false, isOnline: false, lastSeen: new Date() });
    }
    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ DnD
    const defaultStats = {
      strength: 15,
      dexterity: 14,
      constitution: 13,
      intelligence: 12,
      wisdom: 10,
      charisma: 8
    };
    const character = await global.gameService.models.Character.create({
      playerId: player.id,
      name,
      characterClass: characterClass as any,
      level: 1,
      race: 'human' as any,
      background: 'soldier' as any,
      alignment: 'Neutral',
      experience: 0,
      stats: defaultStats,
      hp: 12,
      maxHp: 12,
      position: { x: 0, y: 0 },
      inventory: [],
      initiative: 0,
      isAlive: true
    });
    res.status(201).json({ character });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const deleteCharacter = async (req: Request<{ userId: string; characterId: string }>, res: Response): Promise<void> => {
  try {
    const { userId, characterId } = req.params;
    
    if (!userId || !characterId) {
      res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã userId –∏–ª–∏ characterId' });
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º Player –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const player = await global.gameService.models.Player.findOne({ where: { userId } });
    if (!player) {
      res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const character = await global.gameService.models.Character.findOne({
      where: { 
        id: characterId,
        playerId: player.id 
      }
    });

    if (!character) {
      res.status(404).json({ error: '–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }

    await character.destroy();
    res.json({ message: '–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const getCharacterCreationData = async (req: Request, res: Response): Promise<void> => {
  try {
    const creationData = CharacterCreationService.getCreationData();
    res.json(creationData);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' });
  }
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
const rollAbilityScores = async (req: Request, res: Response): Promise<void> => {
  try {
    const { method = 'fixed' } = req.body;
    
    if (method === 'random') {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
      const randomScores = CharacterCreationService.rollAbilityScores();
      res.json({ scores: randomScores, method: 'random' });
    } else {
      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
      const fixedScores = CharacterCreationService.getAbilityScores();
      res.json({ scores: fixedScores, method: 'fixed' });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫' });
  }
};



// –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º D&D 5e
const createDnDCharacter = async (req: Request<{ userId: string }>, res: Response): Promise<void> => {
  try {
    const { userId } = req.params;
    const characterData = req.body;

    if (!userId) {
      res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω userId' });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const requiredFields = ['name', 'race', 'characterClass', 'background', 'abilityScores', 'skillChoices', 'alignment'];
    for (const field of requiredFields) {
      if (!characterData[field]) {
        res.status(400).json({ error: `–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–æ–ª–µ: ${field}` });
        return;
      }
    }

    // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º Player –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let player = await global.gameService.models.Player.findOne({ where: { userId } });
    if (!player) {
      player = await global.gameService.models.Player.create({ 
        userId, 
        gameId: null, 
        isReady: false, 
        isOnline: false, 
        lastSeen: new Date() 
      });
    }

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞
    const character = await CharacterCreationService.createCharacterStepByStep({
      playerId: player.id,
      name: characterData.name,
      race: characterData.race,
      characterClass: characterData.characterClass,
      background: characterData.background,
      abilityScores: characterData.abilityScores,
      skillChoices: characterData.skillChoices,
      alignment: characterData.alignment,
      appearance: characterData.appearance || {},
      personality: characterData.personality || {},
      backstory: characterData.backstory || ''
    });

    res.status(201).json({ 
      message: '–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      character 
    });
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ D&D:', error);
    res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' });
  }
};

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –Ω–∞–≤—ã–∫–æ–≤
const validateSkillChoices = async (req: Request, res: Response): Promise<void> => {
  try {
    const { characterClass, background, skillChoices } = req.body;

    if (!characterClass || !background || !skillChoices) {
      res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å, –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é –∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏' });
      return;
    }

    const validation = CharacterCreationService.validateSkillChoices(characterClass, background, skillChoices);
    res.json(validation);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤' });
  }
};

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –∫–ª–∞—Å—Å–∞
const getAvailableClassSkills = async (req: Request, res: Response): Promise<void> => {
  try {
    const { characterClass, background } = req.query;

    if (!characterClass || !background) {
      res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å –∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é' });
      return;
    }

    const skillsInfo = CharacterCreationService.getAvailableClassSkills(
      characterClass as string, 
      background as string
    );
    res.json(skillsInfo);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤' });
  }
};

// –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –Ω–∞–≤—ã–∫–∞–º
const getSkillRecommendations = async (req: Request, res: Response): Promise<void> => {
  try {
    const { characterClass, background } = req.query;

    if (!characterClass || !background) {
      res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–ª–∞—Å—Å –∏ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é' });
      return;
    }

    const recommendations = CharacterCreationService.getSkillRecommendations(
      characterClass as string, 
      background as string
    );
    res.json(recommendations);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –Ω–∞–≤—ã–∫–∞–º:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –Ω–∞–≤—ã–∫–∞–º' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID
const getCharacter = async (req: Request<{ characterId: string }>, res: Response): Promise<void> => {
  try {
    const { characterId } = req.params;
    
    if (!characterId) {
      res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω characterId' });
      return;
    }

    const character = await global.gameService.models.Character.findByPk(characterId);
    
    if (!character) {
      res.status(404).json({ error: '–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }

    res.json({ character });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const updateCharacter = async (req: Request<{ characterId: string }>, res: Response): Promise<void> => {
  try {
    const { characterId } = req.params;
    const updateData = req.body;
    
    if (!characterId) {
      res.status(400).json({ error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω characterId' });
      return;
    }

    const character = await global.gameService.models.Character.findByPk(characterId);
    
    if (!character) {
      res.status(404).json({ error: '–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
    const allowedFields = [
      'name', 'alignment', 'appearance', 'personality', 'backstory',
      'inventory', 'equipment', 'weapons', 'armor', 'spells', 'money'
    ];

    const updateFields: any = {};
    allowedFields.forEach(field => {
      if (updateData[field] !== undefined) {
        updateFields[field] = updateData[field];
      }
    });

    await character.update(updateFields);
    
    res.json({ 
      message: '–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      character 
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞' });
  }
};

const gameController = {
  createGame,
  getGames,
  getGame,
  joinGameByName,
  createCharacter,
  moveCharacter,
  rollDice,
  interactWithTile,
  getTileInfo,
  updateGameState,
  getUserCharacters,
  createClassicCharacter,
  deleteCharacter,
  getCharacterCreationData,
  rollAbilityScores,

  createDnDCharacter,
  getCharacter,
  updateCharacter,
  
  // –ù–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–≤—ã–∫–∞–º–∏
  validateSkillChoices,
  getAvailableClassSkills,
  getSkillRecommendations
};

export default gameController; 