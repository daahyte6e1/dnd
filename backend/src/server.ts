import express, { Request, Response, NextFunction } from 'express';
import http from 'http';
import cors from 'cors';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const app = express();
const server = http.createServer(app);

// Middleware
app.use(cors({
  origin: ["http://localhost:5174", "http://localhost:5173"],
  credentials: true
}));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import { sequelize, testConnection } from './config/database';
import { syncDatabase } from './models';

// –°–æ–∑–¥–∞–µ–º GameService
import GameService from './services/GameService';
const gameService = new GameService();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–µ—Ä–≤–∏—Å–∞
import WebSocketService from './services/WebSocketService';
const webSocketService = new WebSocketService(server);
webSocketService.setGameService(gameService);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
declare global {
  var webSocketService: WebSocketService;
  var gameService: GameService;
}

global.webSocketService = webSocketService;
global.gameService = gameService;

console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
import authRoutes from './routes/auth';
import gameRoutes from './routes/games';

app.use('/api/auth', authRoutes);
app.use('/api/games', gameRoutes);

// –ë–∞–∑–æ–≤—ã–π route
app.get('/', (req: Request, res: Response) => {
  res.json({ message: 'DnD Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç!' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err: Error, req: Request, res: Response, next: NextFunction) => {
  console.error(err.stack);
  res.status(500).json({ error: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!' });
});

const PORT = process.env.PORT || 3000;

const startServer = async (): Promise<void> => {
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await testConnection();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await syncDatabase();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server.listen(PORT, () => {
      console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`WebSocket —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º`);
      console.log(`API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
};

startServer(); 