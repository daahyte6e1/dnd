const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

async function testCharacterCreation() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ D&D 5e...\n');

    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    console.log('1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...');
    const creationData = await axios.get(`${API_BASE}/games/character-creation/data`);
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', Object.keys(creationData.data));
    console.log('   –†–∞—Å—ã:', Object.keys(creationData.data.races).length);
    console.log('   –ö–ª–∞—Å—Å—ã:', Object.keys(creationData.data.classes).length);
    console.log('   –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏:', Object.keys(creationData.data.backgrounds).length);
    console.log('   –ù–∞–≤—ã–∫–∏:', Object.keys(creationData.data.skills).length);

    // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    console.log('\n2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...');
    const randomAbilityScores = await axios.post(`${API_BASE}/games/character-creation/roll-abilities`);
    console.log('‚úÖ –°–ª—É—á–∞–π–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', randomAbilityScores.data.scores);
    console.log('   –ú–µ—Ç–æ–¥:', randomAbilityScores.data.method);

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...');
    const manualScores = [16, 14, 12, 10, 8, 6]; // –ü—Ä–∏–º–µ—Ä —Ä—É—á–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const manualAbilityScores = await axios.post(`${API_BASE}/games/character-creation/roll-abilities`, {
      method: 'manual',
      scores: manualScores
    });
    console.log('‚úÖ –†—É—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:', manualAbilityScores.data.scores);
    console.log('   –ú–µ—Ç–æ–¥:', manualAbilityScores.data.method);

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...');
    const validScores = [18, 16, 14, 12, 10, 8];
    const validationResult = await axios.post(`${API_BASE}/games/character-creation/validate-abilities`, {
      scores: validScores
    });
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞:', validationResult.data.valid);
    console.log('   –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:', validationResult.data.modifiers);
    console.log('   –û–±—â–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä:', validationResult.data.totalModifier);

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...');
    try {
      const invalidScores = [20, 16, 14, 12, 10, 8]; // 20 > 18
      await axios.post(`${API_BASE}/games/character-creation/validate-abilities`, {
        scores: invalidScores
      });
    } catch (error) {
      console.log('‚úÖ –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–π–º–∞–Ω–∞:', error.response.data.error);
    }

    // 6. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n6. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const userResponse = await axios.post(`${API_BASE}/auth/register-or-login`, {
      username: 'testuser_' + Date.now()
    });
    const userId = userResponse.data.user.id;
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', userId);

    // 7. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ä—É—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    console.log('\n7. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ä—É—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏...');
    const characterData = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ì–µ—Ä–æ–π (–†—É—á–Ω—ã–µ)',
      race: 'human',
      characterClass: 'fighter',
      background: 'soldier',
      abilityScores: manualScores,
      skillChoices: ['athletics', 'intimidation'],
      alignment: 'Lawful Good',
      appearance: {
        age: 25,
        height: '180 —Å–º',
        weight: '80 –∫–≥',
        eyes: '–ö–∞—Ä–∏–µ',
        skin: '–°–≤–µ—Ç–ª–∞—è',
        hair: '–¢–µ–º–Ω–æ-—Ä—É—Å—ã–µ'
      },
      personality: {
        traits: ['–•—Ä–∞–±—Ä—ã–π', '–ß–µ—Å—Ç–Ω—ã–π'],
        ideals: ['–ó–∞—â–∏—Ç–∞ —Å–ª–∞–±—ã—Ö'],
        bonds: ['–í–µ—Ä–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–µ'],
        flaws: ['–°–ª–∏—à–∫–æ–º –¥–æ–≤–µ—Ä—á–∏–≤—ã–π']
      },
      backstory: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å —Ä—É—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.'
    };

    const characterResponse = await axios.post(`${API_BASE}/games/user/${userId}/dnd-character`, characterData);
    console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å —Ä—É—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ —Å–æ–∑–¥–∞–Ω:', characterResponse.data.character.name);
    console.log('   –ö–ª–∞—Å—Å:', characterResponse.data.character.characterClass);
    console.log('   –†–∞—Å–∞:', characterResponse.data.character.race);
    console.log('   –£—Ä–æ–≤–µ–Ω—å:', characterResponse.data.character.level);
    console.log('   HP:', characterResponse.data.character.hp);
    console.log('   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', characterResponse.data.character.stats);

    // 8. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    console.log('\n8. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏...');
    const randomCharacterData = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ì–µ—Ä–æ–π (–°–ª—É—á–∞–π–Ω—ã–µ)',
      race: 'elf',
      characterClass: 'wizard',
      background: 'sage',
      abilityScores: randomAbilityScores.data.scores,
      skillChoices: ['arcana', 'history'],
      alignment: 'Neutral Good',
      appearance: {
        age: 120,
        height: '170 —Å–º',
        weight: '60 –∫–≥',
        eyes: '–ó–µ–ª–µ–Ω—ã–µ',
        skin: '–ë–ª–µ–¥–Ω–∞—è',
        hair: '–°–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–µ'
      },
      personality: {
        traits: ['–õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π', '–ú—É–¥—Ä—ã–π'],
        ideals: ['–ó–Ω–∞–Ω–∏–µ'],
        bonds: ['–î—Ä–µ–≤–Ω–∏–µ —Ç–µ–∫—Å—Ç—ã'],
        flaws: ['–°–ª–∏—à–∫–æ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π']
      },
      backstory: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.'
    };

    const randomCharacterResponse = await axios.post(`${API_BASE}/games/user/${userId}/dnd-character`, randomCharacterData);
    console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ —Å–æ–∑–¥–∞–Ω:', randomCharacterResponse.data.character.name);
    console.log('   –ö–ª–∞—Å—Å:', randomCharacterResponse.data.character.characterClass);
    console.log('   –†–∞—Å–∞:', randomCharacterResponse.data.character.race);
    console.log('   –£—Ä–æ–≤–µ–Ω—å:', randomCharacterResponse.data.character.level);
    console.log('   HP:', randomCharacterResponse.data.character.hp);
    console.log('   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', randomCharacterResponse.data.character.stats);

    // 9. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n9. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...');
    const charactersResponse = await axios.get(`${API_BASE}/games/user/${userId}/characters`);
    console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞–π–¥–µ–Ω–æ:', charactersResponse.data.characters.length);

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:');
    
    // –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å —Ä—É—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    console.log('\nüë§ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å —Ä—É—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:');
    console.log('   –ò–º—è:', characterResponse.data.character.name);
    console.log('   –†–∞—Å–∞:', creationData.data.races[characterResponse.data.character.race].name);
    console.log('   –ö–ª–∞—Å—Å:', creationData.data.classes[characterResponse.data.character.characterClass].name);
    console.log('   –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:', creationData.data.backgrounds[characterResponse.data.character.background].name);
    console.log('   –ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ:', characterResponse.data.character.alignment);
    console.log('   HP:', characterResponse.data.character.hp);
    console.log('   –ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏:', characterResponse.data.character.armorClass);
    console.log('   –°–∫–æ—Ä–æ—Å—Ç—å:', characterResponse.data.character.speed);
    console.log('   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', characterResponse.data.character.stats);

    // –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    console.log('\nüé≤ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:');
    console.log('   –ò–º—è:', randomCharacterResponse.data.character.name);
    console.log('   –†–∞—Å–∞:', creationData.data.races[randomCharacterResponse.data.character.race].name);
    console.log('   –ö–ª–∞—Å—Å:', creationData.data.classes[randomCharacterResponse.data.character.characterClass].name);
    console.log('   –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è:', creationData.data.backgrounds[randomCharacterResponse.data.character.background].name);
    console.log('   –ú–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ:', randomCharacterResponse.data.character.alignment);
    console.log('   HP:', randomCharacterResponse.data.character.hp);
    console.log('   –ö–ª–∞—Å—Å –±—Ä–æ–Ω–∏:', randomCharacterResponse.data.character.armorClass);
    console.log('   –°–∫–æ—Ä–æ—Å—Ç—å:', randomCharacterResponse.data.character.speed);
    console.log('   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', randomCharacterResponse.data.character.stats);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.response?.data || error.message);
  }
}

testCharacterCreation(); 