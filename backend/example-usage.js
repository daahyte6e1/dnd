const axios = require('axios');

const API_BASE = 'http://localhost:3000/api';

async function exampleUsage() {
  console.log('üìö –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫\n');

  try {
    // 1. –°–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    console.log('üé≤ 1. –°–ª—É—á–∞–π–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:');
    const randomResponse = await axios.post(`${API_BASE}/games/character-creation/roll-abilities`);
    console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç:', randomResponse.data.scores);
    console.log('   –ú–µ—Ç–æ–¥:', randomResponse.data.method);
    console.log();

    // 2. –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    console.log('‚úèÔ∏è  2. –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:');
    const manualScores = [18, 16, 14, 12, 10, 8];
    const manualResponse = await axios.post(`${API_BASE}/games/character-creation/roll-abilities`, {
      method: 'manual',
      scores: manualScores
    });
    console.log('   –í–≤–µ–¥–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', manualScores);
    console.log('   –†–µ–∑—É–ª—å—Ç–∞—Ç:', manualResponse.data.scores);
    console.log('   –ú–µ—Ç–æ–¥:', manualResponse.data.method);
    console.log();

    // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    console.log('‚úÖ 3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:');
    const validationResponse = await axios.post(`${API_BASE}/games/character-creation/validate-abilities`, {
      scores: manualScores
    });
    console.log('   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', validationResponse.data.scores);
    console.log('   –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã:', validationResponse.data.modifiers);
    console.log('   –û–±—â–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä:', validationResponse.data.totalModifier);
    console.log('   –í–∞–ª–∏–¥–Ω—ã:', validationResponse.data.valid);
    console.log();

    // 4. –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    console.log('‚ùå 4. –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:');
    try {
      const invalidScores = [20, 16, 14, 12, 10, 8]; // 20 > 18
      await axios.post(`${API_BASE}/games/character-creation/validate-abilities`, {
        scores: invalidScores
      });
    } catch (error) {
      console.log('   –û—à–∏–±–∫–∞:', error.response.data.error);
      console.log('   –î–µ—Ç–∞–ª–∏:', error.response.data.invalidScores);
    }
    console.log();

    // 5. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    console.log('üë§ 5. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ä—É—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResponse = await axios.post(`${API_BASE}/auth/register-or-login`, {
      username: 'example_user_' + Date.now()
    });
    const userId = userResponse.data.user.id;
    console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', userId);

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const characterData = {
      name: '–ü—Ä–∏–º–µ—Ä –ü–µ—Ä—Å–æ–Ω–∞–∂–∞',
      race: 'human',
      characterClass: 'fighter',
      background: 'soldier',
      abilityScores: manualScores,
      skillChoices: ['athletics', 'intimidation'],
      alignment: 'Lawful Good',
      appearance: {
        age: 25,
        height: '180 —Å–º',
        weight: '80 –∫–≥',
        eyes: '–ö–∞—Ä–∏–µ',
        skin: '–°–≤–µ—Ç–ª–∞—è',
        hair: '–¢–µ–º–Ω–æ-—Ä—É—Å—ã–µ'
      },
      personality: {
        traits: ['–•—Ä–∞–±—Ä—ã–π', '–ß–µ—Å—Ç–Ω—ã–π'],
        ideals: ['–ó–∞—â–∏—Ç–∞ —Å–ª–∞–±—ã—Ö'],
        bonds: ['–í–µ—Ä–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥–µ'],
        flaws: ['–°–ª–∏—à–∫–æ–º –¥–æ–≤–µ—Ä—á–∏–≤—ã–π']
      },
      backstory: '–ü—Ä–∏–º–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ä—É—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.'
    };

    const characterResponse = await axios.post(`${API_BASE}/games/user/${userId}/dnd-character`, characterData);
    console.log('   –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω:', characterResponse.data.character.name);
    console.log('   –ö–ª–∞—Å—Å:', characterResponse.data.character.characterClass);
    console.log('   –†–∞—Å–∞:', characterResponse.data.character.race);
    console.log('   HP:', characterResponse.data.character.hp);
    console.log('   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:', characterResponse.data.character.stats);

    console.log('\nüéâ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data || error.message);
  }
}

exampleUsage(); 